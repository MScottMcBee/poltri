"use strict";function PolTri(){}PolTri.prototype.triangulate=function(t){var e,n=[],i=[];for(this.recursiveSplit(t,n),e=0;e<n.length;e++)this.triangulateMonotonePolygon(n[e],i);return i},PolTri.prototype.recursiveSplit=function(t,e){var n;n=this.splitSimplePolygon(t),n.length>1?(this.recursiveSplit(n[0],e),this.recursiveSplit(n[1],e)):e.push(t)},PolTri.prototype.splitSimplePolygon=function(t){var e,n,i,r,o,s,l,h,u,p;for(n=t.slice(),n.sort(function(t,e){return t.x-e.x}),e=1;e<n.length-1;e++)for(i=t.indexOf(n[e]),r=i+1,r>=t.length&&(r=0),o=i-1,0>o&&(o=t.length-1),s=!1,l=0,t[o].x>t[i].x?t[r].x>=t[i].x&&(s=!0,l=-1):t[o].x<t[i].x&&t[r].x<=t[i].x&&(s=!0,l=1),h=e;s;){if(u=this.validEdge(t,n,e,h+l))return this.splitPolygon(t,n,e,h+l);h+=l,(0>h||h>=n.length)&&(s=!1)}return p=[],p.push(t),p},PolTri.prototype.validEdge=function(t,e,n,i){var r,o,s,l,h,u,p,g,a,y,c;if(i>=e.length||0>i)return!1;if(r=e[n],o=e[i],(this.pointEquals(t[0],r)||this.pointEquals(t[t.length-1],r))&&(this.pointEquals(t[0],o)||this.pointEquals(t[t.length-1],o)))return!1;for(s=0;s<t.length;s++){if(h=!0,l=(s+1)%t.length,(this.pointEquals(t[s],r)||this.pointEquals(t[l],r))&&(this.pointEquals(t[s],o)||this.pointEquals(t[l],o)))return!1;if((this.pointEquals(t[s],r)||this.pointEquals(t[l],r)||this.pointEquals(t[s],o)||this.pointEquals(t[l],o))&&(h=!1),h&&this.doesLineIntersect(t[s],t[l],r,o))return!1}for(g={},g.x=r.x+(o.x-r.x)/2,g.y=r.y+(o.y-r.y)/2,u={x:-10,y:-10},p={x:g.x,y:0},a=0,y=0,s=0;s<t.length;s++)c=s+1,c>=t.length&&(c=0),this.doesLineIntersect(t[s],t[c],u,g)&&a++,this.doesLineIntersect(t[s],t[c],p,g)&&y++;return a%2==0?!1:!0},PolTri.prototype.splitPolygon=function(t,e,n,i){var r,o,s,l,h;for(o=t.indexOf(e[n]),s=t.indexOf(e[i]),l=[],l.push(t[o]);o!=s;)o+=1,o>t.length-1&&(o=0),l.push(t[o]);for(o=t.indexOf(e[n]),h=[],h.push(t[o]);o!=s;)o-=1,0>o&&(o=t.length-1),h.push(t[o]);return r=[],l.length>0&&r.push(l),h.length>0&&r.push(h),r},PolTri.prototype.triangulateMonotonePolygon=function(t,e){var n,i,r,o,s,l,h,u,p,g;if(3==t.length)return void e.push(t);for(r=t.slice(),r.sort(function(t,e){return t.x-e.x}),o=t.length/2|0,n=[],i=[],s=0;s!=o;s++)n.push(t[s]);for(s=t.length-1;s!=o;s--)i.push(t[s]);for(i.push(t[o]),h=[],h.push(r[0],r[1]),s=2;s<r.length;s++)if(u=!1,n.indexOf(r[s])>-1?n.indexOf(h[h.length-1])>-1&&(u=!0):i.indexOf(h[h.length-1])>-1&&(u=!0),u){for(l=s+1;l<r.length;l++)if(this.validEdge(t,r,s,l))return g=this.splitPolygon(t,r,s,l),void this.recurse(g,e);h.push(r[s])}else{for(l=0;l<h.length;l++)if(p=r.indexOf(h[l]),this.validEdge(t,r,s,p))return h.slice(l,1),g=this.splitPolygon(t,r,s,p),void this.recurse(g,e);h.push(r[s])}for(s=1;s<r.length;s++)if(this.validEdge(t,r,0,s))return g=this.splitPolygon(t,r,0,s),void this.recurse(g,e);for(s=0;s<r.length-1;s++)if(this.validEdge(t,r,r.length-1,s))return g=this.splitPolygon(t,r,r.length-1,s),void this.recurse(g,e)},PolTri.prototype.recurse=function(t,e){t.length>0&&(3==t[0].length?e.push(t[0]):this.triangulateMonotonePolygon(t[0],e)),t.length>1&&(3==t[1].length?e.push(t[1]):this.triangulateMonotonePolygon(t[1],e))},PolTri.prototype.doesLineIntersect=function(t,e,n,i){var r=(i.x-n.x)*(t.y-n.y)-(i.y-n.y)*(t.x-n.x),o=(e.x-t.x)*(t.y-n.y)-(e.y-t.y)*(t.x-n.x),s=(i.y-n.y)*(e.x-t.x)-(i.x-n.x)*(e.y-t.y);if(0!=s){var l=r/s,h=o/s;if(l>0&&1>=l&&h>0&&1>=h)return!0}return!1},PolTri.prototype.dist=function(t,e){return Math.sqrt((t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y))},PolTri.prototype.segmentDistToPoint=function(t,e,n){var i,r,o,s,l,h,u;return i={x:n.x-e.x,y:n.y-e.y},r=((t.x-e.x)*i.x+(t.y-e.y)*i.y)/(i.x*i.x+i.y*i.y),r>1?r=1:0>r&&(r=0),o=e.x+r*i.x,s=e.y+r*i.y,l=o-t.x,h=s-t.y,u=Math.sqrt(l*l+h*h)},PolTri.prototype.pointEquals=function(t,e){return t.x==e.x&&t.y==e.y},PolTri.prototype.reduceByDistance=function(t,e){var n,i,r,o,s=[],l=0,h=0;for(r=1;r<t.length-1;r++)o=this.segmentDistToPoint(t[r],t[0],t[t.length-1]),o>l&&(h=r,l=o);return l>e?(n=this.reduceByDistance(t.slice(0,h+1),e),i=this.reduceByDistance(t.slice(h),e),s=n.concat(i.slice(1))):(s.push(t[0]),s.push(t[t.length-1])),s},PolTri.prototype.reduceByPercentage=function(t,e){var n,i,r,o,s,l,h=[],u=[],p=[],g=function(t,e){return e.distance-t.distance};for(i=this.createVWTriangle(t[t.length-1],t[0],t[1]),i&&h.push(i),n=0;n<t.length-2;n++)i=this.createVWTriangle(t[n],t[n+1],t[n+2]),i&&h.push(i);for(i=this.createVWTriangle(t[t.length-2],t[t.length-1],t[0]),i&&h.push(i),r=h.length*e,3>r&&(r=3);h.length>r;)u=h.concat(),u.sort(g),o=h.indexOf(u[u.length-1]),u=u.splice(0,u.length-1),h.splice(o,1),o==h.length&&(o=0),s=o-2,l=o-1,0>s&&(s+=h.length),0>l&&(l+=h.length),h[l]=this.createVWTriangle(h[s].point,h[l].point,h[o].point),s=o-1,l=o+1,0>s&&(s+=h.length),l>=h.length&&(l-=h.length),h[o]=this.createVWTriangle(h[s].point,h[o].point,h[l].point);for(n=0;n<h.length;n++)p.push(h[n].point);return p},PolTri.prototype.createVWTriangle=function(t,e,n){var r=this.dist(t,n),o=this.segmentDistToPoint(e,t,n),s={},l=r*o/2;return 0/0!=l?(s.distance=l,s.point=e,s.order=i+1,s):(console.log("Bad VWTriangle!"),null)};