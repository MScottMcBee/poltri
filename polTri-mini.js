"use strict";function PolTri(){}PolTri.prototype.doesLineIntersect=function(t,e,n,i){var r,o=(i.x-n.x)*(t.y-n.y)-(i.y-n.y)*(t.x-n.x),s=(e.x-t.x)*(t.y-n.y)-(e.y-t.y)*(t.x-n.x),l=(i.y-n.y)*(e.x-t.x)-(i.x-n.x)*(e.y-t.y);if(0!=l){var h=o/l,u=s/l;h>=0&&1>=h&&u>=0&&1>=u&&(r=!0)}return r},PolTri.prototype.dist=function(t,e){return Math.sqrt((t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y))},PolTri.prototype.segmentDistToPoint=function(t,e,n){var i={x:n.x-e.x,y:n.y-e.y},r=((t.x-e.x)*i.x+(t.y-e.y)*i.y)/(i.x*i.x+i.y*i.y);r>1?r=1:0>r&&(r=0);var o=e.x+r*i.x,s=e.y+r*i.y,l=o-t.x,h=s-t.y,u=Math.sqrt(l*l+h*h);return u},PolTri.prototype.reduceByDistance=function(t,e){for(var n,i,r,o,s=[],l=0,h=0,r=1;r<t.length-1;r++){var o=this.segmentDistToPoint(t[r],t[0],t[t.length-1]);o>l&&(h=r,l=o)}return l>e?(n=this.reduceByDistance(t.slice(0,h+1),e),i=this.reduceByDistance(t.slice(h),e),s=n.concat(i.slice(1))):(s.push(t[0]),s.push(t[t.length-1])),s},PolTri.prototype.reduceByPercentage=function(t,e){var n,i,r=[],o=[],s=[];for(i=this.createVWTriangle(t[t.length-1],t[0],t[1]),i&&r.push(i),n=0;n<t.length-2;n++)i=this.createVWTriangle(t[n],t[n+1],t[n+2]),i&&r.push(i);i=this.createVWTriangle(t[t.length-2],t[t.length-1],t[0]),i&&r.push(i);var l=r.length*e;for(3>l&&(l=3);r.length>l;){o=r.concat(),o.sort(function(t,e){return e.distance-t.distance});var h=r.indexOf(o[o.length-1]);o=o.splice(0,o.length-1),r.splice(h,1),h==r.length&&(h=0);var u=h-2,a=h-1;0>u&&(u+=r.length),0>a&&(a+=r.length),r[a]=this.createVWTriangle(r[u].point,r[a].point,r[h].point);var u=h-1,a=h+1;0>u&&(u+=r.length),a>=r.length&&(a-=r.length),r[h]=this.createVWTriangle(r[u].point,r[h].point,r[a].point)}for(n=0;n<r.length;n++)s.push(r[n].point);return s},PolTri.prototype.createVWTriangle=function(t,e,n){var r=this.dist(t,n),o=this.segmentDistToPoint(e,t,n),s={},l=r*o/2;return 0/0!=l?(s.distance=l,s.point=e,s.order=i+1,s):(console.log("Bad VWTriangle!"),null)},PolTri.prototype.recursiveSplit=function(t,e){var n=this.splitSimplePolygon(t);if(n.length>1){var i=n[0],r=n[1];this.recursiveSplit(i,e),this.recursiveSplit(r,e)}else e.push(t)},PolTri.prototype.splitSimplePolygon=function(t){var e=t.slice();e.sort(function(t,e){return t.x-e.x});for(var n=1;n<e.length-1;n++){var i=t.indexOf(e[n]),r=i+1;r>=t.length&&(r=0);var o=i-1;0>o&&(o=t.length-1);var s=!1,l=0;t[o].x>t[i].x?t[r].x>=t[i].x&&(s=!0,l=-1):t[o].x<t[i].x&&t[r].x<=t[i].x&&(s=!0,l=1);for(var h=n;s;){var u=this.validEdge(t,e,n,h+l);if(u)return this.splitPolygon(t,e,n,h+l);h+=l,(0>h||h>=e.length)&&(s=!1)}}var a=[];return a.push(t),a},PolTri.prototype.validEdge=function(t,e,n,i){if(i>=e.length||0>i)return!1;var r={x:e[n].x,y:e[n].y},o={x:e[i].x,y:e[i].y};if((this.pointEquals(t[0],r)||this.pointEquals(t[t.length-1],r))&&(this.pointEquals(t[0],o)||this.pointEquals(t[t.length-1],o)))return!1;for(var s=0;s<t.length;s++){var l=!0,h=(s+1)%t.length;if((this.pointEquals(t[s],r)||this.pointEquals(t[h],r))&&(this.pointEquals(t[s],o)||this.pointEquals(t[h],o)))return!1;if((this.pointEquals(t[s],r)||this.pointEquals(t[h],r)||this.pointEquals(t[s],o)||this.pointEquals(t[h],o))&&(l=!1),l&&this.doesLineIntersect(t[s],t[h],r,o))return!1}var u,a={x:0,y:0},p={};u=0;for(var g=0;g<t.length;g++){var y=g+1;y>=t.length&&(y=0),p.x=r.x+(o.x-r.x)/2,p.y=r.y+(o.y-r.y)/2,this.doesLineIntersect(t[g],t[y],a,p)&&u++}return u%2==0?!1:!0},PolTri.prototype.pointEquals=function(t,e){return t.x==e.x&&t.y==e.y},PolTri.prototype.splitPolygon=function(t,e,n,i){var r,o=[];r=t.indexOf(e[n]);var s=t.indexOf(e[i]),l=[];for(l.push(t[r]);r!=s;)r+=1,r>t.length-1&&(r=0),l.push(t[r]);var h=[];for(r=t.indexOf(e[n]),h.push(t[r]);r!=s;)r-=1,0>r&&(r=t.length-1),h.push(t[r]);return l.length&&o.push(l),h.length&&o.push(h),o},PolTri.prototype.triangulateMonotonePolygon=function(t,e){var n,i,r,o=[],s=[],l=t.slice(),h=t.length/2|0;if(3==t.length)return void e.push(t);for(l.sort(function(t,e){return t.x-e.x}),n=0;n!=h;n++)o.push(t[n]);for(n=t.length-1;n!=h;n--)s.push(t[n]);for(s.push(t[h]),r=[],r.push(l[0],l[1]),n=2;n<l.length;n++){var u=!1;if(o.indexOf(l[n])>-1?o.indexOf(r[r.length-1])>-1&&(u=!0):s.indexOf(r[r.length-1])>-1&&(u=!0),n==l.length-1&&(u=!1),u){for(i=n+1;i<l.length;i++)if(this.validEdge(t,l,n,i)){var a=this.splitPolygon(t,l,n,i);return void this.recurse(a,e)}r.push(l[n])}else{for(i=0;i<r.length;i++){var p=l.indexOf(r[i]);if(this.validEdge(t,l,n,p)){r.slice(i,1);var a=this.splitPolygon(t,l,n,p);return void this.recurse(a,e)}}r.push(l[n])}}for(n=1;n<l.length;n++)if(this.validEdge(t,l,0,n)){var a=this.splitPolygon(t,l,0,n);return void this.recurse(a,e)}for(n=0;n<l.length-1;n++)if(this.validEdge(t,l,l.length-1,n)){var a=this.splitPolygon(t,l,l.length-1,n);return void this.recurse(a,e)}},PolTri.prototype.recurse=function(t,e){t.length>0&&(3==t[0].length?e.push(t[0]):this.triangulateMonotonePolygon(t[0],e)),t.length>1&&(3==t[1].length?e.push(t[1]):this.triangulateMonotonePolygon(t[1],e))};