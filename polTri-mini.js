function PolTri(){}PolTri.prototype.doesLineIntersect=function(t,e,n,i){var r,o=(i.x-n.x)*(t.y-n.y)-(i.y-n.y)*(t.x-n.x),l=(e.x-t.x)*(t.y-n.y)-(e.y-t.y)*(t.x-n.x),s=(i.y-n.y)*(e.x-t.x)-(i.x-n.x)*(e.y-t.y);if(0!=s){var h=o/s,a=l/s;h>=0&&1>=h&&a>=0&&1>=a&&(r=!0)}return r},PolTri.prototype.dist=function(t,e){return Math.sqrt((t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y))},PolTri.prototype.segmentDistToPoint=function(t,e,n){var i={x:n.x-e.x,y:n.y-e.y},r=i.x*i.x+i.y*i.y,o=((t.x-e.x)*i.x+(t.y-e.y)*i.y)/r;o>1?o=1:0>o&&(o=0);var l=e.x+o*i.x,s=e.y+o*i.y,h=l-t.x,a=s-t.y,u=Math.sqrt(h*h+a*a);return u},PolTri.prototype.reduceByDistance=function(t,e){for(var n,i,r=[],o=0,l=0,s=1;s<t.length-1;s++){var h=this.segmentDistToPoint(t[s],t[0],t[t.length-1]);h>o&&(l=s,o=h)}return o>e?(n=this.reduceByDistance(t.slice(0,l+1),e),i=this.reduceByDistance(t.slice(l),e),r=n.concat(i.slice(1))):(r.push(t[0]),r.push(t[t.length-1])),r},PolTri.prototype.reduceByPercentage=function(t,e){var n,i,r=[],o=[],l=[];for(i=this.createVWTriangle(t[t.length-1],t[0],t[1]),i&&r.push(i),n=0;n<t.length-2;n++)i=this.createVWTriangle(t[n],t[n+1],t[n+2]),i&&r.push(i);i=this.createVWTriangle(t[t.length-2],t[t.length-1],t[0]),i&&r.push(i);var s=r.length*e;for(3>s&&(s=3);r.length>s;){o=r.concat(),o.sort(function(t,e){return e.distance-t.distance});var h=r.indexOf(o[o.length-1]);o=o.splice(0,o.length-1),r.splice(h,1),h==r.length&&(h=0);var a=h-2,u=h-1;0>a&&(a+=r.length),0>u&&(u+=r.length),r[u]=this.createVWTriangle(r[a].point,r[u].point,r[h].point);var a=h-1,u=h+1;0>a&&(a+=r.length),u>=r.length&&(u-=r.length),r[h]=this.createVWTriangle(r[a].point,r[h].point,r[u].point)}for(n=0;n<r.length;n++)l.push(r[n].point);return l},PolTri.prototype.createVWTriangle=function(t,e,n){var r=this.dist(t,n),o=this.segmentDistToPoint(e,t,n),l={},s=r*o/2;return 0/0!=s?(l.distance=s,l.point=e,l.order=i+1,l):(console.log("Bad VWTriangle!"),null)},PolTri.prototype.recursiveSplit=function(t,e){var n=this.splitSimplePolygon(t);if(n.length>1){var i=n[0],r=n[1];this.recursiveSplit(i,e),this.recursiveSplit(r,e)}else e.push(t)},PolTri.prototype.splitSimplePolygon=function(t){var e=t.slice();e.sort(function(t,e){return t.x-e.x});for(var n=1;n<e.length-1;n++){var i=t.indexOf(e[n]),r=i+1;r>=t.length&&(r=0);var o=i-1;0>o&&(o=t.length-1);var l=!1,s=0;t[o].x>t[i].x?t[r].x>=t[i].x&&(l=!0,s=-1):t[o].x<t[i].x&&t[r].x<=t[i].x&&(l=!0,s=1);for(var h=n;l;){var a=this.validEdge(t,e,n,h+s);if(a)return this.splitPolygon(t,e,n,h+s);h+=s,(0>h||h>=e.length)&&(l=!1)}}var u=[];return u.push(t),u},PolTri.prototype.validEdge=function(t,e,n,i){if(i>=e.length||0>i)return!1;var r={x:e[n].x,y:e[n].y},o={x:e[i].x,y:e[i].y};if((this.pointEquals(t[0],r)||this.pointEquals(t[t.length-1],r))&&(this.pointEquals(t[0],o)||this.pointEquals(t[t.length-1],o)))return!1;for(var l=0;l<t.length;l++){var s=!0,h=(l+1)%t.length;if((this.pointEquals(t[l],r)||this.pointEquals(t[h],r))&&(this.pointEquals(t[l],o)||this.pointEquals(t[h],o)))return!1;if((this.pointEquals(t[l],r)||this.pointEquals(t[h],r)||this.pointEquals(t[l],o)||this.pointEquals(t[h],o))&&(s=!1),s&&this.doesLineIntersect(t[l],t[h],r,o))return!1}var a,u={x:0,y:0},p={};a=0;for(var g=0;g<t.length;g++){var y=g+1;y>=t.length&&(y=0),p.x=r.x+(o.x-r.x)/2,p.y=r.y+(o.y-r.y)/2,this.doesLineIntersect(t[g],t[y],u,p)&&a++}return a%2==0?!1:!0},PolTri.prototype.pointEquals=function(t,e){return t.x==e.x&&t.y==e.y},PolTri.prototype.splitPolygon=function(t,e,n,i){var r,o=[];r=t.indexOf(e[n]);var l=t.indexOf(e[i]),s=[];for(s.push(t[r]);r!=l;)r+=1,r>t.length-1&&(r=0),s.push(t[r]);var h=[];for(r=t.indexOf(e[n]),h.push(t[r]);r!=l;)r-=1,0>r&&(r=t.length-1),h.push(t[r]);return s.length&&o.push(s),h.length&&o.push(h),o},PolTri.prototype.triangulateMonotonePolygon=function(t,e){if(3==t.length)return void e.push(t);var n=[],i=[],r=t.slice();r.sort(function(t,e){return t.x-e.x});for(var o=t.length/2|0,l=0;l!=o;l++)n.push(t[l]);for(var l=t.length-1;l!=o;l--)i.push(t[l]);i.push(t[o]);var s=[];s.push(r[0],r[1]);for(var l=2;l<r.length;l++){var h=!1;if(n.indexOf(r[l])>-1?n.indexOf(s[s.length-1])>-1&&(h=!0):i.indexOf(s[s.length-1])>-1&&(h=!0),l==r.length-1&&(h=!1),h){for(var a=l+1;a<r.length;a++){if(this.validEdge(t,r,l,a)){var u=this.splitPolygon(t,r,l,a);return void this.recurse(u,e)}break}s.push(r[l])}else{for(var p=s[s.length-1],a=0;a<s.length;a++){var g=r.indexOf(s[a]);if(this.validEdge(t,r,l,g)){s.slice(a,1);var u=this.splitPolygon(t,r,l,g);return void this.recurse(u,e)}}s.push(p),s.push(r[l])}}for(console.log("?"),l=1;l<r.length;l++)if(this.validEdge(t,r,0,l)){s.slice(a,1);var u=this.splitPolygon(t,r,0,l);return void this.recurse(u,e)}for(l=0;l<r.length-1;l++)if(this.validEdge(t,r,r.length-1,l)){s.slice(a,1);var u=this.splitPolygon(t,r,r.length-1,l);return void this.recurse(u,e)}},PolTri.prototype.recurse=function(t,e){t.length>0&&(3==t[0].length?e.push(t[0]):this.triangulateMonotonePolygon(t[0],e)),t.length>1&&(3==t[1].length?e.push(t[1]):this.triangulateMonotonePolygon(t[1],e))};