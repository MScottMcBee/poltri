"use strict";function PolTri(){}PolTri.prototype.triangulate=function(t){var e,n=[],i=[];for(this.recursiveSplit(t,n),e=0;e<n.length;e++)this.triangulateMonotonePolygon(n[e],i);return i},PolTri.prototype.recursiveSplit=function(t,e){var n;n=this.splitSimplePolygon(t),n.length>1?(this.recursiveSplit(n[0],e),this.recursiveSplit(n[1],e)):e.push(t)},PolTri.prototype.splitSimplePolygon=function(t){var e,n,i,o,r,s,l,h,u,p;for(n=t.slice(),n.sort(function(t,e){return t.x-e.x}),e=1;e<n.length-1;e++)for(i=t.indexOf(n[e]),o=i+1,o>=t.length&&(o=0),r=i-1,0>r&&(r=t.length-1),s=!1,l=0,t[r].x>t[i].x?t[o].x>=t[i].x&&(s=!0,l=-1):t[r].x<t[i].x&&t[o].x<=t[i].x&&(s=!0,l=1),h=e;s;){if(u=this.validEdge(t,n,e,h+l))return this.splitPolygon(t,n,e,h+l);h+=l,(0>h||h>=n.length)&&(s=!1)}return p=[],p.push(t),p},PolTri.prototype.validEdge=function(t,e,n,i){var o,r,s,l,h,u,p,g,y,a,c;if(i>=e.length||0>i)return!1;if(o=e[n],r=e[i],(this.pointEquals(t[0],o)||this.pointEquals(t[t.length-1],o))&&(this.pointEquals(t[0],r)||this.pointEquals(t[t.length-1],r)))return!1;for(s=0;s<t.length;s++){if(h=!0,l=(s+1)%t.length,(this.pointEquals(t[s],o)||this.pointEquals(t[l],o))&&(this.pointEquals(t[s],r)||this.pointEquals(t[l],r)))return!1;if((this.pointEquals(t[s],o)||this.pointEquals(t[l],o)||this.pointEquals(t[s],r)||this.pointEquals(t[l],r))&&(h=!1),h&&this.doesLineIntersect(t[s],t[l],o,r))return!1}for(g={x:o.x+(r.x-o.x)/2,y:o.y+(r.y-o.y)/2},u={x:-10,y:-10},p={x:g.x,y:-10},s=0;s<t.length;s++)c=s+1,c>=t.length&&(c=0),g.x=o.x+(r.x-o.x)/2,g.y=o.y+(r.y-o.y)/2,this.doesLineIntersect(t[s],t[c],g,u)&&y++,this.doesLineIntersect(t[s],t[c],g,p)&&a++;return y%2==0&&a&!1?!1:!0},PolTri.prototype.splitPolygon=function(t,e,n,i){var o,r,s,l,h;for(r=t.indexOf(e[n]),s=t.indexOf(e[i]),l=[],l.push(t[r]);r!=s;)r+=1,r>t.length-1&&(r=0),l.push(t[r]);for(r=t.indexOf(e[n]),h=[],h.push(t[r]);r!=s;)r-=1,0>r&&(r=t.length-1),h.push(t[r]);return o=[],l.length>0&&o.push(l),h.length>0&&o.push(h),o},PolTri.prototype.triangulateMonotonePolygon=function(t,e){var n,i,o,r,s,l,h,u,p,g;if(3==t.length)return void e.push(t);for(o=t.slice(),o.sort(function(t,e){return t.x-e.x}),r=t.length/2|0,n=[],i=[],s=0;s!=r;s++)n.push(t[s]);for(s=t.length-1;s!=r;s--)i.push(t[s]);for(i.push(t[r]),h=[],h.push(o[0],o[1]),s=2;s<o.length;s++)if(u=!1,n.indexOf(o[s])>-1?n.indexOf(h[h.length-1])>-1&&(u=!0):i.indexOf(h[h.length-1])>-1&&(u=!0),u){for(l=s+1;l<o.length;l++)if(this.validEdge(t,o,s,l))return g=this.splitPolygon(t,o,s,l),void this.recurse(g,e);h.push(o[s])}else{for(l=0;l<h.length;l++)if(p=o.indexOf(h[l]),this.validEdge(t,o,s,p))return h.slice(l,1),g=this.splitPolygon(t,o,s,p),void this.recurse(g,e);h.push(o[s])}for(s=1;s<o.length;s++)if(this.validEdge(t,o,0,s))return g=this.splitPolygon(t,o,0,s),void this.recurse(g,e);for(s=0;s<o.length-1;s++)if(this.validEdge(t,o,o.length-1,s))return g=this.splitPolygon(t,o,o.length-1,s),void this.recurse(g,e)},PolTri.prototype.recurse=function(t,e){t.length>0&&(3==t[0].length?e.push(t[0]):this.triangulateMonotonePolygon(t[0],e)),t.length>1&&(3==t[1].length?e.push(t[1]):this.triangulateMonotonePolygon(t[1],e))},PolTri.prototype.doesLineIntersect=function(t,e,n,i){var o,r=(i.x-n.x)*(t.y-n.y)-(i.y-n.y)*(t.x-n.x),s=(e.x-t.x)*(t.y-n.y)-(e.y-t.y)*(t.x-n.x),l=(i.y-n.y)*(e.x-t.x)-(i.x-n.x)*(e.y-t.y);if(0!=l){var h=r/l,u=s/l;h>=0&&1>=h&&u>=0&&1>=u&&(o=!0)}return o},PolTri.prototype.dist=function(t,e){return Math.sqrt((t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y))},PolTri.prototype.segmentDistToPoint=function(t,e,n){var i,o,r,s,l,h,u;return i={x:n.x-e.x,y:n.y-e.y},o=((t.x-e.x)*i.x+(t.y-e.y)*i.y)/(i.x*i.x+i.y*i.y),o>1?o=1:0>o&&(o=0),r=e.x+o*i.x,s=e.y+o*i.y,l=r-t.x,h=s-t.y,u=Math.sqrt(l*l+h*h)},PolTri.prototype.pointEquals=function(t,e){return t.x==e.x&&t.y==e.y},PolTri.prototype.reduceByDistance=function(t,e){var n,i,o,r,s=[],l=0,h=0;for(o=1;o<t.length-1;o++)r=this.segmentDistToPoint(t[o],t[0],t[t.length-1]),r>l&&(h=o,l=r);return l>e?(n=this.reduceByDistance(t.slice(0,h+1),e),i=this.reduceByDistance(t.slice(h),e),s=n.concat(i.slice(1))):(s.push(t[0]),s.push(t[t.length-1])),s},PolTri.prototype.reduceByPercentage=function(t,e){var n,i,o,r,s,l,h=[],u=[],p=[],g=function(t,e){return e.distance-t.distance};for(i=this.createVWTriangle(t[t.length-1],t[0],t[1]),i&&h.push(i),n=0;n<t.length-2;n++)i=this.createVWTriangle(t[n],t[n+1],t[n+2]),i&&h.push(i);for(i=this.createVWTriangle(t[t.length-2],t[t.length-1],t[0]),i&&h.push(i),o=h.length*e,3>o&&(o=3);h.length>o;)u=h.concat(),u.sort(g),r=h.indexOf(u[u.length-1]),u=u.splice(0,u.length-1),h.splice(r,1),r==h.length&&(r=0),s=r-2,l=r-1,0>s&&(s+=h.length),0>l&&(l+=h.length),h[l]=this.createVWTriangle(h[s].point,h[l].point,h[r].point),s=r-1,l=r+1,0>s&&(s+=h.length),l>=h.length&&(l-=h.length),h[r]=this.createVWTriangle(h[s].point,h[r].point,h[l].point);for(n=0;n<h.length;n++)p.push(h[n].point);return p},PolTri.prototype.createVWTriangle=function(t,e,n){var o=this.dist(t,n),r=this.segmentDistToPoint(e,t,n),s={},l=o*r/2;return 0/0!=l?(s.distance=l,s.point=e,s.order=i+1,s):(console.log("Bad VWTriangle!"),null)};